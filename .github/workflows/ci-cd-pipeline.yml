name: Backstage CI/CD Pipeline

on:
  push:
    branches:
      - production
  pull_request:
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest
    container:
      image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest  # Imagem compatível com Terraform >= 0.13
    
    defaults:
      run:
        working-directory: terraform/environments/production  # Diretório do Terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Terraform dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.terraform.d
            terraform/environments/production/.terraform
          key: terraform-${{ runner.os }}-${{ hashFiles('terraform/environments/production/**/*.tf', 'terraform/environments/production/terraform.lock.hcl') }}
          restore-keys: |
            terraform-${{ runner.os }}-

      - name: Initialize Terraform
        run: terraform init

      - name: Plan Terraform changes
        run: terraform plan -out=tfplan

      - name: Manual Workflow Approval
        uses: trstringer/manual-approval@v1.9.1
        with:
          secret: secrets.GITHUB_TOKEN
          approvers: daanmacedo, jhonnysilva77
          minimum-approvals: 1

      - name: Apply Terraform changes
        if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/production'
        run: terraform apply -auto-approve tfplan


  # build_and_push:
  #  runs-on: ubuntu-latest
#
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v3
#
  #    - name: Set up Docker Buildx
  #      uses: docker/setup-buildx-action@v2
#
  #     - name: Login no GitHub Container Registry
  #       run: run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
#
  #    - name: Build the Docker image
  #      run: |
  #        docker build -t ghcr.io/${{ github.repository }}:${{ github.sha }} -f ./backstage/backstage-greenn/packages/backend/Dockerfile .
  #      
  #    - name: Push the Docker image to GitHub Container Registry
  #      run: |
  #        docker push ghcr.io/${{ github.repository }}:${{ github.sha }}
  #        docker push ghcr.io/${{ github.repository }}:latest
#
  #deploy:
  #  runs-on: ubuntu-latest
  #  needs: build_and_push
#
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v2
#
  #    - name: Install SSH client
  #      run: sudo apt-get install -y openssh-client
#
  #    - name: Add SSH key for accessing the server
  #      run: |
  #        mkdir -p ~/.ssh
  #        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
  #        chmod 600 ~/.ssh/id_rsa
  #        ssh-keyscan -t rsa your.server.ip >> ~/.ssh/known_hosts
  #    
  #    - name: Install Docker
  #      run: |
  #        sudo apt-get update
  #        sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
  #        curl -fsSL https://get.docker.com -o get-docker.sh
  #        sudo sh get-docker.sh
  #        sudo usermod -aG docker $USER
  #        sudo systemctl enable --now docker
#
  #    - name: Install Docker Compose
  #      run: |
  #        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  #        sudo chmod +x /usr/local/bin/docker-compose
#
  #    - name: Deploy to server via SSH
  #      run: |
  #        ssh -o StrictHostKeyChecking=no your_user@your.server.ip << 'EOF'
  #          cd backstage/backstage-greenn/
  #          docker-compose pull
  #          docker-compose up -d
  #        EOF
#